/*
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Addition_AddKeyword_0_1_or_AdditionKeyword_0_2_or_PlusSignKeyword_0_0;
	protected AbstractElementAlias match_Division_DivKeyword_0_1_or_DivisionKeyword_0_2_or_SolidusKeyword_0_0;
	protected AbstractElementAlias match_Multiplication_AsteriskKeyword_0_0_or_MultKeyword_0_1_or_MultiplicationKeyword_0_2;
	protected AbstractElementAlias match_Subtraction_HyphenMinusKeyword_0_0_or_SubKeyword_0_1_or_SubtractionKeyword_0_2;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Addition_AddKeyword_0_1_or_AdditionKeyword_0_2_or_PlusSignKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAdditionAccess().getAddKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getAdditionAccess().getAdditionKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getAdditionAccess().getPlusSignKeyword_0_0()));
		match_Division_DivKeyword_0_1_or_DivisionKeyword_0_2_or_SolidusKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDivisionAccess().getDivKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getDivisionAccess().getDivisionKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getDivisionAccess().getSolidusKeyword_0_0()));
		match_Multiplication_AsteriskKeyword_0_0_or_MultKeyword_0_1_or_MultiplicationKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getMultiplicationAccess().getMultKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getMultiplicationAccess().getMultiplicationKeyword_0_2()));
		match_Subtraction_HyphenMinusKeyword_0_0_or_SubKeyword_0_1_or_SubtractionKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSubtractionAccess().getSubKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSubtractionAccess().getSubtractionKeyword_0_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Addition_AddKeyword_0_1_or_AdditionKeyword_0_2_or_PlusSignKeyword_0_0.equals(syntax))
				emit_Addition_AddKeyword_0_1_or_AdditionKeyword_0_2_or_PlusSignKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Division_DivKeyword_0_1_or_DivisionKeyword_0_2_or_SolidusKeyword_0_0.equals(syntax))
				emit_Division_DivKeyword_0_1_or_DivisionKeyword_0_2_or_SolidusKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Multiplication_AsteriskKeyword_0_0_or_MultKeyword_0_1_or_MultiplicationKeyword_0_2.equals(syntax))
				emit_Multiplication_AsteriskKeyword_0_0_or_MultKeyword_0_1_or_MultiplicationKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Subtraction_HyphenMinusKeyword_0_0_or_SubKeyword_0_1_or_SubtractionKeyword_0_2.equals(syntax))
				emit_Subtraction_HyphenMinusKeyword_0_0_or_SubKeyword_0_1_or_SubtractionKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '+' | 'add' | 'addition'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) value=INT
	 */
	protected void emit_Addition_AddKeyword_0_1_or_AdditionKeyword_0_2_or_PlusSignKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '/' | 'div' | 'division'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) value=INT
	 */
	protected void emit_Division_DivKeyword_0_1_or_DivisionKeyword_0_2_or_SolidusKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*' | 'mult' | 'multiplication'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) value=INT
	 */
	protected void emit_Multiplication_AsteriskKeyword_0_0_or_MultKeyword_0_1_or_MultiplicationKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '-' | 'sub' | 'subtraction'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) value=INT
	 */
	protected void emit_Subtraction_HyphenMinusKeyword_0_0_or_SubKeyword_0_1_or_SubtractionKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
